// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.3
// source: analyzer.proto

package protoServices

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScoreFlag int32

const (
	ScoreFlag_DOMAIN_SCORE_BENIGN     ScoreFlag = 0
	ScoreFlag_DOMAIN_SCORE_DUBIOUS    ScoreFlag = 1
	ScoreFlag_DOMAIN_SCORE_SUSPICIOUS ScoreFlag = 2
	ScoreFlag_DOMAIN_SCORE_MALICIOUS  ScoreFlag = 3
)

// Enum value maps for ScoreFlag.
var (
	ScoreFlag_name = map[int32]string{
		0: "DOMAIN_SCORE_BENIGN",
		1: "DOMAIN_SCORE_DUBIOUS",
		2: "DOMAIN_SCORE_SUSPICIOUS",
		3: "DOMAIN_SCORE_MALICIOUS",
	}
	ScoreFlag_value = map[string]int32{
		"DOMAIN_SCORE_BENIGN":     0,
		"DOMAIN_SCORE_DUBIOUS":    1,
		"DOMAIN_SCORE_SUSPICIOUS": 2,
		"DOMAIN_SCORE_MALICIOUS":  3,
	}
)

func (x ScoreFlag) Enum() *ScoreFlag {
	p := new(ScoreFlag)
	*p = x
	return p
}

func (x ScoreFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScoreFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_analyzer_proto_enumTypes[0].Descriptor()
}

func (ScoreFlag) Type() protoreflect.EnumType {
	return &file_analyzer_proto_enumTypes[0]
}

func (x ScoreFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScoreFlag.Descriptor instead.
func (ScoreFlag) EnumDescriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{0}
}

type FullDomainScoringParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Semantics *SemanticData        `protobuf:"bytes,1,opt,name=semantics,proto3,oneof" json:"semantics,omitempty"`
	Resources *ResourceRecordsData `protobuf:"bytes,2,opt,name=resources,proto3,oneof" json:"resources,omitempty"`
	Name      string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FullDomainScoringParams) Reset() {
	*x = FullDomainScoringParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullDomainScoringParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullDomainScoringParams) ProtoMessage() {}

func (x *FullDomainScoringParams) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullDomainScoringParams.ProtoReflect.Descriptor instead.
func (*FullDomainScoringParams) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{0}
}

func (x *FullDomainScoringParams) GetSemantics() *SemanticData {
	if x != nil {
		return x.Semantics
	}
	return nil
}

func (x *FullDomainScoringParams) GetResources() *ResourceRecordsData {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *FullDomainScoringParams) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DomainScoring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FinalScore    *float32   `protobuf:"fixed32,2,opt,name=finalScore,proto3,oneof" json:"finalScore,omitempty"`
	SemanticScore *float32   `protobuf:"fixed32,3,opt,name=semanticScore,proto3,oneof" json:"semanticScore,omitempty"`
	ResourceScore *float32   `protobuf:"fixed32,4,opt,name=resourceScore,proto3,oneof" json:"resourceScore,omitempty"`
	DgaScore      *float32   `protobuf:"fixed32,5,opt,name=dgaScore,proto3,oneof" json:"dgaScore,omitempty"`
	Tag           *ScoreFlag `protobuf:"varint,6,opt,name=tag,proto3,enum=services.ScoreFlag,oneof" json:"tag,omitempty"`
}

func (x *DomainScoring) Reset() {
	*x = DomainScoring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainScoring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainScoring) ProtoMessage() {}

func (x *DomainScoring) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainScoring.ProtoReflect.Descriptor instead.
func (*DomainScoring) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{1}
}

func (x *DomainScoring) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainScoring) GetFinalScore() float32 {
	if x != nil && x.FinalScore != nil {
		return *x.FinalScore
	}
	return 0
}

func (x *DomainScoring) GetSemanticScore() float32 {
	if x != nil && x.SemanticScore != nil {
		return *x.SemanticScore
	}
	return 0
}

func (x *DomainScoring) GetResourceScore() float32 {
	if x != nil && x.ResourceScore != nil {
		return *x.ResourceScore
	}
	return 0
}

func (x *DomainScoring) GetDgaScore() float32 {
	if x != nil && x.DgaScore != nil {
		return *x.DgaScore
	}
	return 0
}

func (x *DomainScoring) GetTag() ScoreFlag {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ScoreFlag_DOMAIN_SCORE_BENIGN
}

type SemanticData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelsCount     *int64   `protobuf:"varint,1,opt,name=levelsCount,proto3,oneof" json:"levelsCount,omitempty"`
	LevelsMAD       *float32 `protobuf:"fixed32,2,opt,name=levelsMAD,proto3,oneof" json:"levelsMAD,omitempty"`
	SymbolsCount    *int64   `protobuf:"varint,3,opt,name=symbolsCount,proto3,oneof" json:"symbolsCount,omitempty"`
	VowelsRatio     *float32 `protobuf:"fixed32,4,opt,name=vowelsRatio,proto3,oneof" json:"vowelsRatio,omitempty"`
	ConsonantsRatio *float32 `protobuf:"fixed32,5,opt,name=consonantsRatio,proto3,oneof" json:"consonantsRatio,omitempty"`
	NumbersRatio    *float32 `protobuf:"fixed32,6,opt,name=numbersRatio,proto3,oneof" json:"numbersRatio,omitempty"`
	PointsRatio     *float32 `protobuf:"fixed32,7,opt,name=pointsRatio,proto3,oneof" json:"pointsRatio,omitempty"`
	SpecialRatio    *float32 `protobuf:"fixed32,8,opt,name=specialRatio,proto3,oneof" json:"specialRatio,omitempty"`
	UniqueRatio     *float32 `protobuf:"fixed32,9,opt,name=uniqueRatio,proto3,oneof" json:"uniqueRatio,omitempty"`
	MaxRepeated     *int64   `protobuf:"varint,10,opt,name=maxRepeated,proto3,oneof" json:"maxRepeated,omitempty"`
}

func (x *SemanticData) Reset() {
	*x = SemanticData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemanticData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticData) ProtoMessage() {}

func (x *SemanticData) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticData.ProtoReflect.Descriptor instead.
func (*SemanticData) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{2}
}

func (x *SemanticData) GetLevelsCount() int64 {
	if x != nil && x.LevelsCount != nil {
		return *x.LevelsCount
	}
	return 0
}

func (x *SemanticData) GetLevelsMAD() float32 {
	if x != nil && x.LevelsMAD != nil {
		return *x.LevelsMAD
	}
	return 0
}

func (x *SemanticData) GetSymbolsCount() int64 {
	if x != nil && x.SymbolsCount != nil {
		return *x.SymbolsCount
	}
	return 0
}

func (x *SemanticData) GetVowelsRatio() float32 {
	if x != nil && x.VowelsRatio != nil {
		return *x.VowelsRatio
	}
	return 0
}

func (x *SemanticData) GetConsonantsRatio() float32 {
	if x != nil && x.ConsonantsRatio != nil {
		return *x.ConsonantsRatio
	}
	return 0
}

func (x *SemanticData) GetNumbersRatio() float32 {
	if x != nil && x.NumbersRatio != nil {
		return *x.NumbersRatio
	}
	return 0
}

func (x *SemanticData) GetPointsRatio() float32 {
	if x != nil && x.PointsRatio != nil {
		return *x.PointsRatio
	}
	return 0
}

func (x *SemanticData) GetSpecialRatio() float32 {
	if x != nil && x.SpecialRatio != nil {
		return *x.SpecialRatio
	}
	return 0
}

func (x *SemanticData) GetUniqueRatio() float32 {
	if x != nil && x.UniqueRatio != nil {
		return *x.UniqueRatio
	}
	return 0
}

func (x *SemanticData) GetMaxRepeated() int64 {
	if x != nil && x.MaxRepeated != nil {
		return *x.MaxRepeated
	}
	return 0
}

type ResourceRecordsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ARecords     int64   `protobuf:"varint,1,opt,name=aRecords,proto3" json:"aRecords,omitempty"`
	MxRecords    int64   `protobuf:"varint,2,opt,name=mxRecords,proto3" json:"mxRecords,omitempty"`
	CnameRecords int64   `protobuf:"varint,3,opt,name=cnameRecords,proto3" json:"cnameRecords,omitempty"`
	TxtRecords   int64   `protobuf:"varint,4,opt,name=txtRecords,proto3" json:"txtRecords,omitempty"`
	PtrRecords   int64   `protobuf:"varint,5,opt,name=ptrRecords,proto3" json:"ptrRecords,omitempty"`
	PtrRatio     float32 `protobuf:"fixed32,6,opt,name=ptrRatio,proto3" json:"ptrRatio,omitempty"`
}

func (x *ResourceRecordsData) Reset() {
	*x = ResourceRecordsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analyzer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRecordsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRecordsData) ProtoMessage() {}

func (x *ResourceRecordsData) ProtoReflect() protoreflect.Message {
	mi := &file_analyzer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRecordsData.ProtoReflect.Descriptor instead.
func (*ResourceRecordsData) Descriptor() ([]byte, []int) {
	return file_analyzer_proto_rawDescGZIP(), []int{3}
}

func (x *ResourceRecordsData) GetARecords() int64 {
	if x != nil {
		return x.ARecords
	}
	return 0
}

func (x *ResourceRecordsData) GetMxRecords() int64 {
	if x != nil {
		return x.MxRecords
	}
	return 0
}

func (x *ResourceRecordsData) GetCnameRecords() int64 {
	if x != nil {
		return x.CnameRecords
	}
	return 0
}

func (x *ResourceRecordsData) GetTxtRecords() int64 {
	if x != nil {
		return x.TxtRecords
	}
	return 0
}

func (x *ResourceRecordsData) GetPtrRecords() int64 {
	if x != nil {
		return x.PtrRecords
	}
	return 0
}

func (x *ResourceRecordsData) GetPtrRatio() float32 {
	if x != nil {
		return x.PtrRatio
	}
	return 0
}

var File_analyzer_proto protoreflect.FileDescriptor

var file_analyzer_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x17, 0x46,
	0x75, 0x6c, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x40, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x22, 0xb3, 0x02, 0x0a, 0x0d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x63,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52,
	0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0d, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x67, 0x61, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x08, 0x64, 0x67, 0x61, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x48, 0x04, 0x52, 0x03, 0x74, 0x61, 0x67, 0x88, 0x01,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x67, 0x61, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61, 0x67, 0x22, 0xc3, 0x04, 0x0a, 0x0c, 0x53, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0b, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x4d, 0x41, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x4d, 0x41,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0c, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x76, 0x6f, 0x77, 0x65, 0x6c, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x03, 0x52, 0x0b, 0x76, 0x6f, 0x77, 0x65, 0x6c, 0x73, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6e, 0x61, 0x6e,
	0x74, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x06, 0x52, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x07, 0x52, 0x0c, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x4d, 0x41, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x76, 0x6f,
	0x77, 0x65, 0x6c, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22,
	0xcf, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x78, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x78, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x74, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x74, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x74, 0x72, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x74, 0x72, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x2a, 0x77, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x17,
	0x0a, 0x13, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x42,
	0x45, 0x4e, 0x49, 0x47, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x4d, 0x41, 0x49,
	0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x44, 0x55, 0x42, 0x49, 0x4f, 0x55, 0x53, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52,
	0x45, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x49, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x4d,
	0x41, 0x4c, 0x49, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x03, 0x32, 0x65, 0x0a, 0x15, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x63,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x38, 0x5a, 0x36, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_analyzer_proto_rawDescOnce sync.Once
	file_analyzer_proto_rawDescData = file_analyzer_proto_rawDesc
)

func file_analyzer_proto_rawDescGZIP() []byte {
	file_analyzer_proto_rawDescOnce.Do(func() {
		file_analyzer_proto_rawDescData = protoimpl.X.CompressGZIP(file_analyzer_proto_rawDescData)
	})
	return file_analyzer_proto_rawDescData
}

var file_analyzer_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_analyzer_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_analyzer_proto_goTypes = []interface{}{
	(ScoreFlag)(0),                  // 0: services.ScoreFlag
	(*FullDomainScoringParams)(nil), // 1: services.FullDomainScoringParams
	(*DomainScoring)(nil),           // 2: services.DomainScoring
	(*SemanticData)(nil),            // 3: services.SemanticData
	(*ResourceRecordsData)(nil),     // 4: services.ResourceRecordsData
}
var file_analyzer_proto_depIdxs = []int32{
	3, // 0: services.FullDomainScoringParams.semantics:type_name -> services.SemanticData
	4, // 1: services.FullDomainScoringParams.resources:type_name -> services.ResourceRecordsData
	0, // 2: services.DomainScoring.tag:type_name -> services.ScoreFlag
	1, // 3: services.DomainAnalysisService.GetFullScoring:input_type -> services.FullDomainScoringParams
	2, // 4: services.DomainAnalysisService.GetFullScoring:output_type -> services.DomainScoring
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_analyzer_proto_init() }
func file_analyzer_proto_init() {
	if File_analyzer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_analyzer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullDomainScoringParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainScoring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemanticData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analyzer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRecordsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_analyzer_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_analyzer_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_analyzer_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_analyzer_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_analyzer_proto_goTypes,
		DependencyIndexes: file_analyzer_proto_depIdxs,
		EnumInfos:         file_analyzer_proto_enumTypes,
		MessageInfos:      file_analyzer_proto_msgTypes,
	}.Build()
	File_analyzer_proto = out.File
	file_analyzer_proto_rawDesc = nil
	file_analyzer_proto_goTypes = nil
	file_analyzer_proto_depIdxs = nil
}
